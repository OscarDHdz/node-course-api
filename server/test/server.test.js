const expect    = require('expect'   );
const request = require('supertest');
const _ = require('lodash');

const {ObjectID} = require('mongodb');

const {app}  = require('./../server');
const {Todo} = require('../models/todo');
const {User} = require('../models/user');


// My Modules
const logger = require('../logging/logger');
logger.setPath('./server/logging/');

// Seed require
const {todosConst, populateTodos, usersConst, populateUsers} = require('./seed/seed');
beforeEach(populateTodos);
beforeEach(populateUsers);

describe('POST /todos', () => {

  it('Should create a new todo', (done) => {
    var text = 'Test todo text';

    request(app)
      .post('/todos')
      .send({text})
      .expect(200)
      .expect((res) => {
        expect(res.body.text).toBe(text);
      })
      .end((err, res) => {
        if ( err ) {
          return done(err);
        }
        Todo.find({
          _id: res.body._id
        }).then((todos) => {
          expect(todos.length).toBe(1);
          expect(todos[0].text).toBe(text);
          done();
        }).catch((e) => done(e));
      });
  });

  it('Should not create todo with invalid body data', (done) => {
    request(app)
      .post('/todos')
      .send({
        // Text Missing
      })
      .expect(400)
      .end((err, res) => {
        if ( err ) {
          return done(err);
        }

        Todo.find().then((todos) => {
            expect(todos.length).toBe(todosConst.length);
            done();
        }).catch((e) => done(e));

      })
  });

})

describe('GET /todos', () => {
  it('Should get all todos', (done) => {
    request(app)
      .get('/todos')
      .expect(200)
      .expect((res) => {
        expect(res.body.todos.length).toBe(todosConst.length);
      })
      .end(done)
  })
})

describe('GET /todos/:id', () => {

  it('Should return todo Doc', (done) =>{


    request(app)
    .get(`/todos/${todosConst[0]._id.toHexString()}`)
    .expect(200)
    .expect((res) => {
      expect(res.body.todo.text).toBe(todosConst[0].text);
    })
    .end(done);
  });

  it('Should not return an autogenerated Id', (done) => {
    var id = new ObjectID();
    request(app)
      .get(`/todos/${id.toHexString()}`)
      .expect(404)
      .end(done);
  })

})

describe('DELETE /todos/:id', () => {

  it('Should remove a todo', (done) => {
    request(app)
      .delete(`/todos/${todosConst[0]._id.toHexString()}`)
      .expect(200)
      .expect((res) => {
        expect(res.body.status).toBe('REMOVED');
      })
      .end(done);
  });

  it('Should return 404 if todo not found', (done) => {
    request(app)
      .delete(`/todos/${new ObjectID()}`)
      .expect(404)
      .end(done);
  });

  it('Should return 404 if object ID is invalid', (done) => {
    request(app)
      .delete(`/todos/123`)
      .expect(404)
      .end(done);
  })

});

describe('PATCH /todos/:id', () => {

  it('Should update a Todo', (done) => {

    var hexId = todosConst[1]._id.toHexString();

    request(app)
      .patch(`/todos/${hexId}`)
      .send({
        completed: true
      })
      .expect(200)
      .expect((res) => {
        expect(res.body.todo._id).toBe(hexId);
        expect(res.body.todo.completed).toBe(true);
      })
      .end(done);

    });

  it('Should return 404 at Random ID', (done) => {

     request(app)
      .patch(`/todos/${new ObjectID()}`)
      .send({
        completed: true
      })
      .expect(404)
      .end(done);

  });


});

describe('POST /users', () => {

  it('Should create a user that exists', (done) => {
    var email = 'test1@test.com';
    var password = 'qwe234qwe';
    request(app)
      .post('/users')
      .send({
        email,
        password
      })
      .expect(200)
      .expect((res) => {
        expect(res.headers['x-auth']).toExist();
        expect(res.body._id).toExist();
        expect(res.body.email).toExist();
      })
      .end((err, res) => {
        if ( err ) {
          return done(err);
        }

        User.findOne({email}).then((user) =>{
          expect(user).toExist();
          expect(user.password).toNotBe(password);
          done();
        }).catch((e) => done(e));
      });
  });

  it('Should validate error if request invalid {minlength}', (done) => {
    var email = 'test1@test.com';
    var password = '123';
    request(app)
      .post('/users')
      .send({email, password})
      .expect(400)
      .expect((res) => {
        expect(res.body.errors.password.kind).toBe('minlength');
      })
      .end(done);
  });

  it('Should not create user if email in use', (done) => {
    var email = usersConst[0].email;
    var password = '1254683';

    request(app)
      .post('/users')
      .send({email, password})
      .expect(400)
      .expect((res) => {
        expect(res.body.errmsg).toInclude('duplicate');
      })
      .end(done);
  });

});

describe('GET /users/me', () => {

  it('Should return user if authenticated', (done) => {
    request(app)
      .get('/users/me')
      .set('x-auth', usersConst[0].tokens[0].token)
      .expect(200)
      .expect((res) => {
        expect(res.body._id).toBe(usersConst[0]._id.toHexString());
        expect(res.body.email).toBe(usersConst[0].email);
      })
      .end(done);
  });

  it('Should return 401 if not authenticated', (done) => {
    request(app)
      .get('/users/me')
      .expect(401)
      .expect((res) => {
        expect(res.body).toEqual({});
      })
      .end(done)
  });

})

describe('POST /users/login', () => {

  it('Should login user and return auth toekn', (done) => {
    var body = _.pick(usersConst[0], ['email', 'password']);
    request(app)
      .post('/users/login')
      .send( body )
      .expect(200)
      .expect((res) => {
        expect(res.header['x-auth']).toExist();
        expect(res.body.email).toBe(body.email);
      })
      .end( (err, res) => {

        if( err ) {
          return done(err);
        }

        User.findById(usersConst[0]._id).then((user) => {

          expect(user.tokens[1].token).toEqual(res.headers['x-auth']);

          done();
        }).catch((e) => done());

      });
  });

  it('Should reject invalid login', (done) => {

    var body = _.pick(usersConst[0], ['email']);
    body.password = 'NotOriginalPaswword';
    request(app)
      .post('/users/login')
      .send(body)
      .expect(401)
      .expect((res) => {
        expect(res.body).toEqual({});
      })
      .end(done);

  });

});

describe('DELETE /users/me/token', () => {

  it('Should remove auth token on logout', (done) => {
    request(app)
      .delete('/users/me/token')
      .set('x-auth', usersConst[0].tokens[0].token)
      .expect(200)
      .end( (err, res) => {
        if ( err ) {
          return done(err);
        }

        User.findById(usersConst[0]._id).then((user) => {
          expect(user.tokens.length).toEqual(0);
          done();
        }).catch((e) => {
          return done(e);
        });
      });

  });

})
