const expect    = require('expect'   );
const request = require('supertest');

const {ObjectID} = require('mongodb');

const {app}  = require('./../server');
const {Todo} = require('../models/todo');

// My Modules
const logger = require('../logging/logger');
logger.setPath('./server/logging/');


const todosConst = [{
  _id: new ObjectID(),
  text: 'First test todo'
  }, {
  _id: new ObjectID(),
  text: 'Second test todo'
}]

// Run before each test case
beforeEach((done) => {
  Todo.remove({}).then(() => {
    return Todo.insertMany(todosConst);
  }).then(() => done());
})

describe('POST /todos', () => {

  it('Should create a new todo', (done) => {
    var text = 'Test todo text';

    request(app)
      .post('/todos')
      .send({text})
      .expect(200)
      .expect((res) => {
        expect(res.body.text).toBe(text);
      })
      .end((err, res) => {
        if ( err ) {
          return done(err);
        }
        Todo.find({
          _id: res.body._id
        }).then((todos) => {
          expect(todos.length).toBe(1);
          expect(todos[0].text).toBe(text);
          done();
        }).catch((e) => done(e));
      });
  });

  it('Should not create todo with invalid body data', (done) => {
    request(app)
      .post('/todos')
      .send({
        // Text Missing
      })
      .expect(400)
      .end((err, res) => {
        if ( err ) {
          return done(err);
        }

        Todo.find().then((todos) => {
            expect(todos.length).toBe(todosConst.length);
            done();
        }).catch((e) => done(e));

      })
  });

})

describe('GET /todos', () => {
  it('Should get all todos', (done) => {
    request(app)
      .get('/todos')
      .expect(200)
      .expect((res) => {
        expect(res.body.todos.length).toBe(todosConst.length);
      })
      .end(done)
  })
})

describe('GET /todos/:id', () => {

  it('Should return todo Doc', (done) =>{


    request(app)
    .get(`/todos/${todosConst[0]._id.toHexString()}`)
    .expect(200)
    .expect((res) => {
      expect(res.body.todo.text).toBe(todosConst[0].text);
    })
    .end(done);
  });

  it('Should not return an autogenerated Id', (done) => {
    var id = new ObjectID();
    request(app)
      .get(`/todos/${id.toHexString()}`)
      .expect(404)
      .end(done);
  })

})

describe('DELETE /todos/:id', () => {

  it('Should remove a todo', (done) => {
    request(app)
      .delete(`/todos/${todosConst[0]._id.toHexString()}`)
      .expect(200)
      .expect((res) => {
        expect(res.body.status).toBe('REMOVED');
      })
      .end(done);
  });

  it('Should return 404 if todo not found', (done) => {
    request(app)
      .delete(`/todos/${new ObjectID()}`)
      .expect(404)
      .end(done);
  });

  it('Should return 404 if object ID is invalid', (done) => {
    request(app)
      .delete(`/todos/123`)
      .expect(404)
      .end(done);
  })

});

describe('PATCH /todos/:id', () => {

  it('Should update a Todo', (done) => {

    var hexId = todosConst[1]._id.toHexString();

    request(app)
      .patch(`/todos/${hexId}`)
      .send({
        completed: true
      })
      .expect(200)
      .expect((res) => {
        expect(res.body.todo._id).toBe(hexId);
        expect(res.body.todo.completed).toBe(true);
      })
      .end(done);

    });

  it('Should return 404 at Random ID', (done) => {

     request(app)
      .patch(`/todos/${new ObjectID()}`)
      .send({
        completed: true
      })
      .expect(404)
      .end(done);

  });


});
